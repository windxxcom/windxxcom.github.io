<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Wordpress升级5.1.1后回复评论跳转问题]]></title>
    <url>%2Fwordpress-5-1-1-comment-ajax.html</url>
    <content type="text"><![CDATA[原文地址：解决升级Wordpress 5.1后回复评论框不跟随、页面刷新问题 有一个小网站，一直跟着Wordpress最新版本更新，没出过什么问题，今天打开想回条评论，结果点击回复按钮，跳转到了新页面，正常应该是评论框跟随过来，无刷新ajax评论的，鼓捣了几个小时，搜索了一些关键词，没有解决，最后想到评论ajax是从张戈这学到的，赶紧看看他遇到没有！ 原文如下： 如果是 begin 主题，直接在 functions.php 里面找到：zmingcx_scripts 函数，在最后一个 } 之前加上： // 加载回复js if ( is_singular() &amp;&amp; comments_open() &amp;&amp; get_option( 'thread_comments' ) ) { wp_enqueue_script( 'comment-reply' ); } 这段代码其实就是在页面加载一段 JS： &lt;script type='text/javascript' src='/wp-includes/js/comment-reply.min.js?ver=5.1.1'>&lt;/script> 所以，非 begin 主题，只需要在主题的 header.php 加上如下代码即可： &lt;?php if ( is_singular() &amp;&amp; comments_open() &amp;&amp; get_option( 'thread_comments' ) ) { ?> &lt;script type='text/javascript' src='/wp-includes/js/comment-reply.min.js?ver=5.1.1'>&lt;/script> &lt;?php } ?>]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[把博客从Wordpress迁移到hexo]]></title>
    <url>%2FWordpress-for-hexo.html</url>
    <content type="text"><![CDATA[博客内容很少，写东西也很少，感觉用Wordpress有点浪费，于是迁移到了github上。 搭建Github+Hexo的教程网上很多，就不重复写了，这次主要遇到的一个问题就是，新建的仓库一定要填写为用户名.github.io，之前看教程的时候太马虎了，只填写了用户名，结果白忙活了大半天，真是愚蠢啊！]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次重装python后firewalld无法启动的记录]]></title>
    <url>%2Fpython-firewalld-failed.html</url>
    <content type="text"><![CDATA[本人不懂linux什么的，但是又喜欢鼓捣，安装python3.6后，把系统自带的python2.7.5鼓捣出了点问题，因为没有修复的能力，选择了卸载重装。 卸载重装python2.7.5卸载重装很顺利，用了网上的方法 原文链接：https://www.cnblogs.com/wangjunjiehome/p/9239005.html 1、删除现有Python [root@test ~]# rpm -qa|grep python|xargs rpm -ev --allmatches --nodeps ##强制删除已安装程序及其关联 [root@test ~]# whereis python |xargs rm -frv ##删除所有残余文件 ##xargs，允许你对输出执行其他某些命令 [root@test ~]# whereis python ##验证删除，返回无结果 2、删除现有的yum [root@test ~]# rpm -qa|grep yum|xargs rpm -ev --allmatches --nodeps [root@test ~]# whereis yum |xargs rm -frv 3、从http://mirrors.ustc.edu.cn/centos/6.4/os/x86_64/Packages/下载相应的包 python-2.6.6-36.el6.x86_64.rpm python-devel-2.6.6-36.el6.x86_64.rpm python-libs-2.6.6-36.el6.x86_64.rpm python-pycurl-7.19.0-8.el6.x86_64.rpm python-setuptools-0.6.10-3.el6.noarch.rpm python-urlgrabber-3.9.1-8.el6.noarch.rpm python-iniparse-0.3.1-2.1.el6.noarch.rpm rpm-python-4.8.0-32.el6.x86_64.rpm yum-3.2.29-40.el6.centos.noarch.rpm yum-metadata-parser-1.1.2-16.el6.x86_64.rpm yum-utils-1.1.30-14.el6.noarch.rpm yum-plugin-fastestmirror-1.1.30-14.el6.noarch.rpm yum-plugin-protectbase-1.1.30-14.el6.noarch.rpm yum-plugin-aliases-1.1.30-14.el6.noarch.rpm yum-plugin-downloadonly-1.1.30-14.el6.noarch.rpm 由于源中版本会更新，具体请查看URL中的版本再下载下来！ [root@test ~]# rpm -Uvh --replacepkgs python*.rpm [root@test ~]# rpm -Uvh --replacepkgs rpm-python*.rpm yum*.rpm 可能之间还需要zlib和zlib-devel包，根据情况下载并安装！ 重装python2.7.5后firewalld无法启动下面是从网上找到的相同的问题，一模一样，但是按着他的修复方法却行不通，因为我的python2和3是共存的，默认还是python2.7.5，所有像他讲的把/usr/bin/firewall-cmd /usr/bin/firewall-offline-cmd /usr/sbin/firewalld 中的#!/usr/bin/python -Es修改为#!/usr/bin/python2.7 -Es是行不通的。 [root@localhost ~]# service firewalld restart Redirecting to /bin/systemctl restart firewalld.service Job for firewalld.service failed because the control process exited with error code. See "systemctl status firewalld.service" and "journalctl -xe" for details. [root@localhost ~]# systemctl firewalld restart Unknown operation ‘firewalld‘. [root@localhost ~]# service firewalld stop Redirecting to /bin/systemctl stop firewalld.service [root@localhost ~]# service firewalld start Redirecting to /bin/systemctl start firewalld.service Job for firewalld.service failed because the control process exited with error code. See "systemctl status firewalld.service" and "journalctl -xe" for details. [root@localhost ~]# systemctl status firewall Unit firewall.service could not be found. [root@localhost ~]# firewall-cmd --state Traceback (most recent call last): File "/usr/bin/firewall-cmd", line 24, in from gi.repository import GObject ModuleNotFoundError: No module named ‘gi‘ 最后一行提示缺少gi模块，但是yum install gi又报错 Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile * epel: mirror.layeronline.com * ius: mirrors.kernel.org No package gi available. Error: Nothing to do 最后百度谷歌了一番，找到了答案， https://bugs.launchpad.net/typecatcher/+bug/1258885 yum install python-gobject 解决问题！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Cloudflare把网站IP换成1.1.1.1/1.0.0.1]]></title>
    <url>%2Fip-1-0-0-1.html</url>
    <content type="text"><![CDATA[近日，Cloudflare官方发文，与APNIC官方合作打算用IP1.1.1.1推出速度更快、私密性更强的DNS Cloudflare 运行全球规模最大、速度最快的网络之一。 APNIC 是一个非营利组织，管理着亚太和大洋洲地区的 IP 地址分配。 Cloudflare 有网络，APNIC 有 IP 地址（1.1.1.1）。 一个共同的使命激发了我们，那就是建立一个更好的互联网。如欲详细了解我们的宗旨， 请访问我们各自的博文：Cloudflare 博客 /APNIC 博客。 经过测试，这个IP也可以通过Web访问，直接中文地址 https://1.1.1.1/zh-Hans/ 可以证明， 于是楼主就冒着好奇心开始了探索。我们都知道CloudFlare有提供免费的CDN服务，并且IP都是多网站共用的，说明了CF是通过判断host来为用户输出对应的缓存（反向代）。节点首先对本人的一个网站做了个实验。 我们修改hosts文件，把自己用CloudFlare加速的网站IP指向1.0.0.1 接着清空缓存亲测我们能够正常访问，也就是说明CloudFlare的节点是共用的 那么1.1.1.1能不能作为节点IP使用呢？怎么用呢？第一个问题的答案是可以的，别问我怎么知道，因为我看到别人在用了。 以下是把网站IP换成1.1.1.1的教程步骤，很多人都需要CF的合作账户，其实经过我本人测试是没有任何门槛的，也不需要申请什么！ 实测过程中，更改CloudFlare DNS以后，过几天会收到CloudFlare变更DNS的通知邮件和CDN失效时间，为了保证网站的可用性，我还是把网站域名添加到了CloudFlare合作账户上。 有需要的可以自己搭建： 教程：CloudFlare Partner（合作伙伴）申请指南以及部署教程 或者用现成的： https://cdn.kevsrv.com/ https://cf.tlo.xyz/ https://su.geekzu.org/ https://dns.hrka.net/ 教程– 1.登陆CloudFlare官网，删除之前的域名如果之前没有用CloudFlare请跳过此步骤。 2.把域名添加到CloudFlare合作账户平台上使用CloudFlare账号登陆第三方平台，添加dns记录指向自己主机IP。 3.修改域名DNS为非CloudFlare如果之前没有用CloudFlare请跳过此步骤。 使用CloudFlare的CDN服务，默认NS服务器为dora.ns.cloudflare.com和 george.ns.cloudflare.com，请修改DNS服务器为非CloudFlare。 4.添加域名解析记录添加域名解析记录 IPV4指向1.0.0.1（部分运营商1.1.1.1可能无法访问因为他们把1.1.1.1认为路由器的IP了，所以大家也可以尝试1.0.0.1。这个亲测也可以正常访问） IPV6指向任意CloudFlare IPV6地址，我这边本地访问CloudFlare的 IPV6地址很快。 如： 2606:4700:30:0:0:0:681b:8a1b 2606:4700:30:0:0:0:681b:8b1b 也就是说这个 IP 和 CloudFlare CDN 分配给你的 IP 其实功能无异。 我已经把本站换成1.0.0.1，以下是效果图。 本地ping为IPV6地址： 站长工具ping 本文为整理修改，原文链接如下。]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Wordpress优化文章图片属性并使用lazyload延迟加载]]></title>
    <url>%2Fwordpress-image-auto-alt-lazyload.html</url>
    <content type="text"><![CDATA[优化Wordpress图片结构Wordpress图片移除无用属性，如：class、src、alt、width、height，仅保留src、alt。 Wordpress默认图片属性 &lt;img class="alignnone size-full wp-image-123" src="图片地址" alt="图片描述" width="430" height="280" /> 优化后 &lt;img src="图片地址" alt="图片描述" /> 将下面代码放入当前主题functions.php中 //删除图像属性 add_filter( 'post_thumbnail_html', 'windxx_remove_images_attribute', 10 ); add_filter( 'image_send_to_editor', 'windxx_remove_images_attribute', 10 ); function windxx_remove_images_attribute( $html ) { $html = preg_replace( '/width="(\d*)"\s+height="(\d*)"\s+class=\"[^\"]*\"/', "", $html ); $html = preg_replace( '/ /', "", $html ); return $html; } Wordpress图片自动添加alt属性Wordpress图片的alt默认是空白的，需要在添加图片时一起写入，将下面代码放入当前主题functions.php中，图片alt属性默认设置为文章标题。 //Wordpress图片自动添加alt属性 add_filter( 'the_content', 'image_alt');function image_alt($c) {global $post;$title = $post->post_title;$s = array('/src="(.+?.(jpg|bmp|png|jepg|gif))"/i'=> 'src="$1" alt="'.$title.'"');foreach($s as$p => $r){$c = preg_replace($p,$r,$c);}return$c;} Wordpress文章图片使用lazyload延迟加载WordPress图片延迟加载的介绍预加载，顾名思义，在超出网站可视范围内，图片不做加载，等到用户滚动浏览器窗口，图片元素到达可视范围内，开始加载图片，这样的方式可以打打的节省网站的资源和加快网站加载的速度，所以对于图片较多的wordpress网站来说，图片预加载功能还是非常的好的。 lazyload默认的图片结构 &lt;img class="lazy" data-original="img/example.jpg" src="loading.gif"> data-original属性为图片真实的url地址，src属性为图片加载显示前的占位图片 引入lazyload必须的js文件将下面代码添加到当前主题的footer.php文件中 &lt;script src="https://cdnjs.loli.net/ajax/libs/jquery.lazyload/1.9.1/jquery.lazyload.min.js">&lt;/script> &lt;script type="text/javascript"> $(function() { $("img").lazyload({ effect:"fadeIn" }); }); &lt;/script> 自动修改文章图片属性为lazyload需要值将下面代码放入当前主题functions.php中 //图片延迟加载 add_filter ('the_content', 'lazyload'); function lazyload($content) { $loadimg_url=get_bloginfo('template_directory').'/images/loading.gif'; if(!is_feed()||!is_robots) { $content=preg_replace('/&lt;img(.+)src=[\'"]([^\'"]+)[\'"](.*)>/i',"&lt;img\$1data-original=\"\$2\" src=\"$loadimg_url\"\$3>\n&lt;noscript>\$0&lt;/noscript>",$content); } return $content; } Wordpress图片启动lazyload延迟加载后SEO问题图片使用lazyload延迟加载后肯定的对SEO有所影响的，但是用户体验会有所上升，鱼和熊掌无法兼得，可以在网站不是很重要的内容上，如：头像图片等上面启用lazyload，还是不错的选择。 参考资料： http://www.2zzt.com/jcandcj/7050.html http://www.wazhuti.com/873.html https://www.xuewangzhan.com/wpbbs/1964.html]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[注册Google账号提示“此号码不能用于验证”的解决办法]]></title>
    <url>%2Fgoogle-register-phone-number-error.html</url>
    <content type="text"><![CDATA[1、下载个蓝灯开代理访问（下载后直接安装运行即可）。下载地址点这里，或者选择其他科学上网软件。 2、访问 https://whatismyipaddress.com/ 查看代理的真实地理位置（需要将这个网址添加到代理列表中），我现在检测到的是日本。 3、访问 https://www.google.com 去注册（注意不能用Google Chrome浏览器访问哦！，最好用Safari或IE浏览器），填写时需要注意的地方如下图所示： 4、填完之后点击“下一步”会弹出“隐私权和条款”，点击“我同意”，会进入以下界面选择手机号所在地并填写手机号，正常填写就行，最好用这种分割方式填写：+86 123 1234 1234 选择手机号所在地并填写手机号 这样就可以收到手机短信啦！]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress最新版完全禁用JSON REST API输出站点信息]]></title>
    <url>%2Fwordpress-close-json-rest-api.html</url>
    <content type="text"><![CDATA[WordPress 从 4.4 版本开始新增的 JSON REST API 功能，通过这个 REST API 可以很轻松的获取网站的数据，可应用于其他网站、手机 APP 或小程序等 前段时间使用过这个做了一段时间的小程序，后来感觉没必要，而且还使用的他人的插件，反而会拖累网站的速度，而且 REST API 采用 GET 请求方式，这就为 DDOS 攻击提供了一个新的攻击途径 所以我们应尽可能的禁止掉这些不必要的功能需求，并且去掉 head 里面输出 wp-json 链接，我之前就直接输出了，查看源代码就能直接看到 需要简单一点的话，我们可以直接使用插件Disable REST API来完全禁用 REST API，但我更倾向纯代码的方法，在这里就介绍下代码版兼容所有 WordPress 版本的完全禁用 REST API 或者说移除 head 里面 wp-json 链接的方法 直接将以下代码添加到主题的 functions.php 文件中即可禁用 JSON REST API ： // 屏蔽 REST API if ( version_compare( get_bloginfo( 'version' ), '4.7', '>=' ) ) { function disable_rest_api( $access ) { return new WP_Error( 'rest_cannot_acess', '无访问权限', array( 'status' => 403 ) ); } add_filter( 'rest_authentication_errors', 'disable_rest_api' ); } else { // Filters for WP-API version 1.x add_filter( 'json_enabled', '__return_false' ); add_filter( 'json_jsonp_enabled', '__return_false' ); // Filters for WP-API version 2.x add_filter( 'rest_enabled', '__return_false' ); add_filter( 'rest_jsonp_enabled', '__return_false' ); } // 移除头部 wp-json 标签和 HTTP header 中的 link remove_action('wp_head', 'rest_output_link_wp_head', 10 ); remove_action('template_redirect', 'rest_output_link_header', 11 ); 当然也可以借助 Nginx 来控制 /wp-json 的访问，这里就不说了，可以通过判断请求头的 UA 信息来操作，除了 iOS 跟 Android 设备，其它访问 /wp-json 的路径均返回 403 状态码]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[免插件为 WordPress 添加 XML 网站地图]]></title>
    <url>%2Fwordpress-add-xml-sitemap.html</url>
    <content type="text"><![CDATA[将下列代码保存为 sitemap.php 放在网站根目录，这时候可以试试打开你的 博客主页/sitemap.php 看看是否添加成功。 &lt;?php require('./wp-blog-header.php'); header("Content-type: text/xml"); header('HTTP/1.1 200 OK'); $posts_to_show = 1000; echo '&lt;?xml version="1.0" encoding="UTF-8"?>'; echo '&lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:mobile="http://www.baidu.com/schemas/sitemap-mobile/1/">' ?> &lt;url> &lt;loc>&lt;?php echo get_home_url(); ?>&lt;/loc> &lt;lastmod>&lt;?php $ltime = get_lastpostmodified(GMT);$ltime = gmdate('Y-m-d\TH:i:s+00:00', strtotime($ltime)); echo $ltime; ?>&lt;/lastmod> &lt;changefreq>daily&lt;/changefreq> &lt;priority>1.0&lt;/priority> &lt;/url> &lt;?php /* 文章页面 */ header("Content-type: text/xml"); $myposts = get_posts( "numberposts=" . $posts_to_show ); foreach( $myposts as $post ) { ?> &lt;url> &lt;loc>&lt;?php the_permalink(); ?>&lt;/loc> &lt;lastmod>&lt;?php the_time('c') ?>&lt;/lastmod> &lt;changefreq>monthly&lt;/changefreq> &lt;priority>0.6&lt;/priority> &lt;/url> &lt;?php } /* 文章循环结束 */ ?> &lt;?php /* 单页面 */ $mypages = get_pages(); if(count($mypages) > 0) { foreach($mypages as $page) { ?> &lt;url> &lt;loc>&lt;?php echo get_page_link($page->ID); ?>&lt;/loc> &lt;lastmod>&lt;?php echo str_replace(" ","T",get_page($page->ID)->post_modified); ?>+00:00&lt;/lastmod> &lt;changefreq>weekly&lt;/changefreq> &lt;priority>0.6&lt;/priority> &lt;/url> &lt;?php }} /* 单页面循环结束 */ ?> &lt;?php /* 博客分类 */ $terms = get_terms('category', 'orderby=name&amp;hide_empty=0' ); $count = count($terms); if($count > 0){ foreach ($terms as $term) { ?> &lt;url> &lt;loc>&lt;?php echo get_term_link($term, $term->slug); ?>&lt;/loc> &lt;changefreq>weekly&lt;/changefreq> &lt;priority>0.8&lt;/priority> &lt;/url> &lt;?php }} /* 分类循环结束 */?> &lt;?php /* 标签(可选) */ $tags = get_terms("post_tag"); foreach ( $tags as $key => $tag ) { $link = get_term_link( intval($tag->term_id), "post_tag" ); if ( is_wp_error( $link ) ) return false; $tags[ $key ]->link = $link; ?> &lt;url> &lt;loc>&lt;?php echo $link ?>&lt;/loc> &lt;changefreq>monthly&lt;/changefreq> &lt;priority>0.4&lt;/priority> &lt;/url> &lt;?php } /* 标签循环结束 */ ?> &lt;/urlset> 如果能正常显示 XML 格式网页则表示代码添加无误，这时候只需要将 博客首页/sitemap.php 重定向到 博客首页/sitemap.xml，具体是修改位于根目录下的 .htaccess 添加语句 RewriteRule ^(sitemap).xml$ $1.php，一般情况下应该是这样子的： RewriteRule ^(sitemap)\.xml$ $1.php # BEGIN WordPress &lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / RewriteRule ^index\.php$ - [L] RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.php [L] &lt;/IfModule&gt; # END WordPress 以上是 apache 的写法，nginx 是在配置文件的 server 块中写入下面的一句： rewrite /sitemap.xml /sitemap.php last;]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>SEO</tag>
        <tag>Sitemap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3下的一个类-直接用数据库发布WordPress博文]]></title>
    <url>%2Fpython3-class-mysql-wordpress.html</url>
    <content type="text"><![CDATA[class wordpress_post: def __init__(self,tittle,content): self.tittle=tittle self.content=content def mysql_con(self): conn = pymysql.connect(host='localhost', port=3306, user='root', passwd='pwd', db='wordpress', charset='utf8') #将这里换为你的数据库地址 return conn def up(self): times=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())) sql="INSERT INTO wp_posts(post_author,post_date,post_content,post_title,post_excerpt,post_status,comment_status,ping_status,post_name,to_ping,pinged,post_modified,post_content_filtered,post_parent,menu_order,post_type,comment_count) VALUES ('1','%s','%s','%s','','publish','open','open','%s','','','%s','','0','0','post','0')" % (str(times),str(self.content),str(self.tittle),str(self.tittle),str(times)) return sql def cat(self,ids,cat): sql="INSERT INTO wp_term_relationships(object_id,term_taxonomy_id,term_order) VALUES (%s,%s,'0')"%(ids,cat) return sql def close_mysql(self,cursor,conn): conn.commit() cursor.close() conn.close() 使用方法： a=wordpress_post(str(t),wz_content) #这里第一个参数是标题 第二个是文章内容 conn=a.mysql_con() cursor = conn.cursor() c=a.up() effect_row = cursor.execute(c) new_id = cursor.lastrowid #这里是记录文章id以便设置文章的分类 d=a.cat(new_id,'1') effect_row = cursor.execute(d) a.close_mysql(cursor,conn)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[宝塔面板重装系统后恢复数据库]]></title>
    <url>%2Fbt-reinstall-system-restore-database.html</url>
    <content type="text"><![CDATA[本文适用于Linux下，系统盘和数据盘分开且数据盘数据没有丢失的情况。 最近遇到了一次系统出问题，一直进入维护模式无法正常使用，发工单询问，无解，只能重装系统，还好系统盘和数据盘是分开的。 重装系统后，重新安装BT面板，数据库点击“启动”显示成功，但是一直无法启动，切没有报错。 Nginx、PHP等可重新卸载安装。 但是数据库不修复的话，数据无法导出。 因为是小白，只能慢慢的查资料研究了，搞完以后发现其实很简单，只是自己不懂罢了。 1、修改数据库配置修改数据库配置文件为面板默认，我是直接从其他安装好的面板拷贝过来的。 2、修改数据库目录权限修改默认数据库/www/server/data目录权限为mysql，直接在面板文件管理里面不能修改。 groupadd mysql #创建mysql组 useradd -g mysql mysql #创建mysql用户添加到mysql组 chown -R mysql.mysql /www/server/data #修改data 3、重装nginx php等nginx、PHP等直接重装即可。 4、删除443端口重新添加如果网站启用了SSL加密，需要删除443端口重新添加，不然网站会无法访问。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>宝塔面板</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP：安卓、IOS、PC端分别显示随机内容]]></title>
    <url>%2Fphp-android-ios-pc-ad.html</url>
    <content type="text"><![CDATA[&lt;?php $ios = array( 'IOS-广告代码_1', 'IOS-广告代码_2', 'IOS-广告代码_3', ); //广告代码随机数组 $az = array( 'AZ-广告代码_1', 'AZ-广告代码_2', 'AZ-广告代码_3', ); //广告代码随机数组 $pc = array( 'PC-广告代码_1', 'PC-广告代码_2', 'PC-广告代码_3', ); //广告代码随机数组 $pc_rand = array_rand($pc); //获取随机数组的键 $az_rand = array_rand($pc); //获取随机数组的键 $ios_rand = array_rand($pc); //获取随机数组的键 if(strpos($_SERVER['HTTP_USER_AGENT'], 'iPhone')||strpos($_SERVER['HTTP_USER_AGENT'], 'iPad')){ echo $ios[$ios_rand]; }else if(strpos($_SERVER['HTTP_USER_AGENT'], 'Android')){ echo $az[$az_rand]; }else{ echo $pc[$pc_rand]; } ?>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>广告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress: 后台添加显示用户注册时间和登录IP]]></title>
    <url>%2Fwordpress-add-user-time-ip.html</url>
    <content type="text"><![CDATA[前言： 用WordPress 做网站，如果需要做备案评审的话，还是有许多地方要改的，根据评审要求(挺多的 ╮(╯▽╰)╭~) 做相应的修改。 比如：在后台需要做个显示 新用户注册时间 和 访客登录的IP 显示、访客日志统计、登录失败次数限制等诸多要求。没办法，只能网上找资料了 -_-|||~ 这里先说一下，在后台 添加用户注册时间 和 登录IP 的显示: 找到 wp-includes/functions.php 这个文件 编辑打开，在文本末尾添加 即可 代码如下（网上找的，可用）： //// --------------- 华丽的分割线 ------------- //// /** * add the register record. */ function get_client_ip() { if (getenv("HTTP_CLIENT_IP") &amp;&amp; strcasecmp(getenv("HTTP_CLIENT_IP"), "unknown")) $ip = getenv("HTTP_CLIENT_IP"); else if (getenv("HTTP_X_FORWARDED_FOR") &amp;&amp; strcasecmp(getenv("HTTP_X_FORWARDED_FOR"), "unknown")) $ip = getenv("HTTP_X_FORWARDED_FOR"); else if (getenv("REMOTE_ADDR") &amp;&amp; strcasecmp(getenv("REMOTE_ADDR"), "unknown")) $ip = getenv("REMOTE_ADDR"); else if (isset ($_SERVER['REMOTE_ADDR']) &amp;&amp; $_SERVER['REMOTE_ADDR'] &amp;&amp; strcasecmp($_SERVER['REMOTE_ADDR'], "unknown")) $ip = $_SERVER['REMOTE_ADDR']; else $ip = "unknown"; return ($ip); } // 创建一个新字段存储用户注册时的IP地址 add_action('user_register', 'log_ip'); function log_ip($user_id){ $ip = get_client_ip(); update_user_meta($user_id, 'signup_ip', $ip); } // 创建新字段存储用户登录时间和登录IP add_action( 'wp_login', 'insert_last_login' ); function insert_last_login( $login ) { global $user_id; $user = get_userdatabylogin( $login ); update_user_meta( $user->ID, 'last_login', current_time( 'mysql' ) ); $last_login_ip = get_client_ip(); update_user_meta( $user->ID, 'last_login_ip', $last_login_ip); } // 添加额外的栏目 add_filter('manage_users_columns', 'add_user_additional_column'); function add_user_additional_column($columns) { $columns['user_nickname'] = '昵称'; $columns['user_url'] = '网站'; $columns['reg_time'] = '注册时间'; $columns['signup_ip'] = '注册IP'; $columns['last_login'] = '上次登录'; // 打算将注册IP和注册时间、登录IP和登录时间合并显示，所以我注销下面两行 /*$columns['signup_ip'] = '注册IP';*/ $columns['last_login_ip'] = '登录IP'; unset($columns['name']);//移除“姓名”这一栏，如果你需要保留，删除这行即可 return $columns; } //显示栏目的内容 add_action('manage_users_custom_column', 'show_user_additional_column_content', 10, 3); function show_user_additional_column_content($value, $column_name, $user_id) { $user = get_userdata( $user_id ); // 输出“昵称” if ( 'user_nickname' == $column_name ) return $user->nickname; // 输出用户的网站 if ( 'user_url' == $column_name ) return '&lt;a href="'.$user->user_url.'" target="_blank">'.$user->user_url.'&lt;/a>'; // 输出注册时间和注册IP if('reg_time' == $column_name ){ return get_date_from_gmt($user->user_registered) ; } // 输出注册时间和注册IP if('signup' == $column_name ){ return get_user_meta( $user->ID, 'signup_ip', true); } // 输出最近登录时间和登录IP if ( 'last_login' == $column_name &amp;&amp; $user->last_login ){ return get_user_meta( $user->ID, 'last_login', ture ); } // 输出最近登录时间和登录IP if ( 'last_login_ip' == $column_name ){ return get_user_meta( $user->ID, 'last_login_ip', ture ); } return $value; } // 默认按照注册时间排序 add_filter( "manage_users_sortable_columns", 'cmhello_users_sortable_columns' ); function cmhello_users_sortable_columns($sortable_columns){ $sortable_columns['reg_time'] = 'reg_time'; return $sortable_columns; } add_action( 'pre_user_query', 'cmhello_users_search_order' ); function cmhello_users_search_order($obj){ if(!isset($_REQUEST['orderby']) || $_REQUEST['orderby']=='reg_time' ){ if( !in_array($_REQUEST['order'],array('asc','desc')) ){ $_REQUEST['order'] = 'desc'; } $obj->query_orderby = "ORDER BY user_registered ".$_REQUEST['order'].""; } } (温馨提示：尽量自己手写这段代码，不要复制，程序员不是靠复制代码来提升技术的 ( ╯▽╰)~) 来个效果图： 另附一些 可能需要用的插件： 注册用户名限制 — 插件 Restrict Registration 访问日志 – 插件 WP-Statistics 、Slimstat Analytics (这两个都可以) 用户登录失败(次数过多) 锁定 – 插件 Login LockDown 数据库备份 – WP Database Backup (推荐使用) 注册验证 (防机器注册) — 插件 SI Captcha Anti-Spam settings (推荐使用) (提示：wordpress 大多数插件都是国外的，所以基本都是显示英文，英语不好的看起来就有点吃力了，好好补补你的英文水平水平吧~ (╯▽╰)~) 后语： 最后自己弄了个用户修改密码，密码太弱限制用户修改密码 (新手上路，勿喷~) 用户修改密码 — 限制 找到： /wp-admin/user-edit.php 文件打开 定位到 &lt;tr class="pw-weak"> 这句做修改 &lt;tr class="pw-weak"> &lt;!-- &lt;th>&lt;?php _e( 'Confirm Password' ); ?>&lt;/th> --> &lt;td>&lt;label> &lt;a>密码太弱，请重设!&lt;/a> &lt;!-- &lt;input type="checkbox" name="pw_weak" class="pw-checkbox" /> &lt;span id="pw-weak-text-label">&lt;?php _e( 'Confirm use of potentially weak password' ); ?>&lt;/span> --> &lt;/label> &lt;/br> &lt;label>(温馨提示：请尽量使用 大小写,特殊字符 的组合方式设置密码.)&lt;/label> &lt;/td> &lt;/tr> WordPress 自带有判断用户输入 密码强弱程度的判断，这里只是引用了WordPress的判断，替换了原来 “确认使用弱密码”的复选框。(也可以自己写一个 判断密码 长度的限制，我是嫌麻烦了(～￣▽￣)～) 效果图：]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress默认图片加水印后缀]]></title>
    <url>%2Fwordpress-image-add-suffix.html</url>
    <content type="text"><![CDATA[一般用七牛、又拍云、阿里OSS等第三方图片储存时会用到 将下列代码加入到 functions.php 文件中 /* 图片加水印后缀 */ function fa_hack_image_url($matches) { $prefix = '_water';// 自定义版本或者水印字符串 return $matches[1] . $matches['2'] . $prefix; } function fa_image_add_watermelon( $content ){ $content = preg_replace_callback("/(&lt;img[^>]*src *= *[\"']?)([^\"']*)/i", 'fa_hack_image_url' , $content); return $content; } add_filter('the_content','fa_image_add_watermelon'); 如果你需要给feed中的图片也加上水印，则在 functions.php 中加入下面的代码 add_filter('the_content_feed','fa_image_add_watermelon'); add_filter('the_excerpt_rss','fa_image_add_watermelon');]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关闭WordPress新用户注册邮件通知方法]]></title>
    <url>%2Fwordpress-close-new-user-mail.html</url>
    <content type="text"><![CDATA[wordpress博客每次有新用户注册都会给我们管理邮箱发一邮件告诉你有新用户注册了，那么如果我们不想接受要如何取消呢，下面我来介绍关闭wordpress新用户注册邮件通知具体方法。 打开 wp-includes/pluggable.php 文件 搜索定位到(1778行): @wp_mail(get_option('admin_email'), sprintf(__('[%s] New User Registration'), $blogname), $message); 在代码前面加上 // 注释该语句，以后你再也不会收到新用户注册的邮件了。]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress 不同分类显示不同内容（广告）]]></title>
    <url>%2Fwordpress-custom-single-ad.html</url>
    <content type="text"><![CDATA[WordPress 不同分类显示不同内容（广告），比如多本小说站，一般一个分类为一本小说，为了了解每一本小说的收入效果，需要为不同的分类（小说）添加不同的广告，这个不同的广告不一定是格式大小不同，而是广告代号不同。 和WordPress判断文章所属分类函数in_category，实现文章页自定义这篇文章一个意思。 WordPress 不同分类显示不同内容（广告）两种方法第一种：复制三份single.php文件,重命名为single_1.php、single_2.php、single_normal.php 用下面的代码，替换原single.php所有内容。然后把不同的广告代码分别放置在不同的single*.php文件里面 &lt;?php if ( in_category('&lt;span style="color: #ff0000;">a&lt;/span>') ) { include(TEMPLATEPATH . '/single_1.php'); } elseif ( in_category('&lt;span style="color: #ff0000;">b&lt;/span>') ) { include(TEMPLATEPATH . '/single_2.php'); } else { include(TEMPLATEPATH . '/single_normal.php'); } ?> 第二种：直接修改single.php文件,在需要放置不同广告的地方，使用以下代码。 &lt;?php if(in_category('&lt;span style="color: #ff0000;">a&lt;/span>')) { ?> //添加内容一。 &lt;?php } ?> &lt;?php if(in_category('&lt;span style="color: #ff0000;">b&lt;/span>')) { ?> //添加内容二。 &lt;?php } ?> 文中红色代码部分修改成自己分类别名。]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>广告</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress 创建自定义字段面板]]></title>
    <url>%2Fwordpress-zidingyiziduanmianban.html</url>
    <content type="text"><![CDATA[但是对于自定义字段的时候，在后台添加的使用通过那个面板添加十分不方便，比如你要使用自定义字段来实现seo功能，那么你每次都需要重复输入字段名称：title\keywords\description。 今天这篇文章，我们将讲解为自定义字段添加一个固定的面板，这样就不用每次为每个字段输入字段名称了。 说明：不要误以为自定义面板就是用来添加自定义字段的，你可以通过本篇教程添加一个自定义字段来干任何事，比如你只是想显示一个提示信息而已，用来显示浏览次数，等等。。。本篇教程的核心应该是怎样在后台添加自定义面板。 效果图： 要在后台创建一个面板，首先了解一个函数： &lt;?php add_meta_box( $id, $title, $callback, $post_type, $context, $priority, $callback_args ); //$id--面板的的id属性(html)。 //$title--面板标题 //$callback--调用的函数 //$post_type--要在编辑页面创建面板的文章类型，比如post\page..自定义的文章类型等 //$context--(可选)面板要显示的位置，可以使用normal\advanced\side分别为普通、高级(貌似跟普通效果差不多)、边栏 //$priority--(可选)显示的优先级，可以使用high\core\default\low 如果设置为high那么它会显示在默认的那些自定义字段、评论、作者什么的前面 //$callback_args--(可选、数组)要传给那个$callback函数的参数 ?> 准备工作：准备文件，作者以默认的twenty ten主题做测试，在默认主题中新建一个metabox.php文件，而后在主题的functions.php中include该文件。 include 'metabox.php'; 步骤、（接下来的代码参考自露兜博客） 一、准备要创建的字段信息我们将添加keywords和description两个字段。在metabox.php文件中添加代码(php文件别忘了&lt;?php 和?&gt;哦)： $new_meta_boxes = array( "description" => array( "name" => "description", "std" => "这里填默认的网页描述", "title" => "网页描述:"), "keywords" => array( "name" => "keywords", "std" => "这里填默认的网页关键字", "title" => "关键字:") ); 这是一个二维数组，数组的第一个元素就是description字段的信息，包括标题、字段名、描述信息。 二、创建(显示)面板内容的函数function new_meta_boxes() { global $post, $new_meta_boxes; foreach($new_meta_boxes as $meta_box) { $meta_box_value = get_post_meta($post->ID, $meta_box['name'].'_value', true); if($meta_box_value == "") $meta_box_value = $meta_box['std']; echo'&lt;input type="hidden" name="'.$meta_box['name'].'_noncename" id="'.$meta_box['name'].'_noncename" value="'.wp_create_nonce( plugin_basename(__FILE__) ).'" />'; // 自定义字段标题 echo'&lt;h4>'.$meta_box['title'].'&lt;/h4>'; // 自定义字段输入框 echo '&lt;textarea cols="60" rows="3" name="'.$meta_box['name'].'_value">'.$meta_box_value.'&lt;/textarea>&lt;br />'; } } 该函数用来显示面板的内容，将作为add_meta_box函数才callback参数调用。 三、创建面板function create_meta_box() { global $theme_name; if ( function_exists('add_meta_box') ) { add_meta_box( 'new-meta-boxes', '自定义模块', 'new_meta_boxes', 'post', 'normal', 'high' ); } } 这个函数代码就不解释了，看前面函数详细介绍。 四、保存更新数据function save_postdata( $post_id ) { global $post, $new_meta_boxes; foreach($new_meta_boxes as $meta_box) { if ( !wp_verify_nonce( $_POST[$meta_box['name'].'_noncename'], plugin_basename(__FILE__) )) { return $post_id; } if ( 'page' == $_POST['post_type'] ) { if ( !current_user_can( 'edit_page', $post_id )) return $post_id; } else { if ( !current_user_can( 'edit_post', $post_id )) return $post_id; } $data = $_POST[$meta_box['name'].'_value']; if(get_post_meta($post_id, $meta_box['name'].'_value') == "") add_post_meta($post_id, $meta_box['name'].'_value', $data, true); elseif($data != get_post_meta($post_id, $meta_box['name'].'_value', true)) update_post_meta($post_id, $meta_box['name'].'_value', $data); elseif($data == "") delete_post_meta($post_id, $meta_box['name'].'_value', get_post_meta($post_id, $meta_box['name'].'_value', true)); } } 改函数用来保存和更新我们的字段值 五、触发函数OK，函数代码都准备好了，下马就是触发了，我们应该先执行create_meta_box函数，因为 add_meta_box是由它调用的。使用动作钩子，继续添加下面的代码： add_action('admin_menu', 'create_meta_box'); add_action('save_post', 'save_postdata'); 同时在保存文章的时候执行更新和保存字段的函数。 六、调用函数调用：通过 get_post_meta函数调用即可 $description = get_post_meta($post->ID, "description_value", true); $keywords = get_post_meta($post->ID, "keywords_value", true); 注意字段名称，我们在保存数据的时候，保存的字段名称分别是description_value、keywords_value。。。 OK，自定义面板的创建结束。]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>自定义字段</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何给WordPress网站添加欢迎引导页]]></title>
    <url>%2Fwordpress-yindaoye.html</url>
    <content type="text"><![CDATA[由于WordPress的博客出身，许多WordPress网站主题看起来像是个单纯的博客。很多用户想要给自己的网站添加一个欢迎引导页面，将WordPress博客改造成CMS网站，或者将最重要的内容推荐给网站访问者。今天就给大家介绍一下，如何给WordPress网站添加静态欢迎引导页面。 方法1：利用WordPress的静态页面功能在WordPress后台，通过【页面】-&gt;【新建页面】，添加两个新页面，分别命名为『首页』和『博客』。 然后在后台的【设置】-&gt;【阅读设置】中，修改【首页显示】选项，将主页和文章页，分别设置为刚刚创建的『首页』和『博客』页面。 这样，你就可以在『首页』中随意设置欢迎页面的内容了，添加图片，修改文字等。 方法2：给WordPress添加html静态引导页面上面的方法1，简单实用。许多WordPress主题设计师利用这个办法，设计出了许多漂亮的CMS风格的WordPress主题。问题在于，如果我使用的WordPress主题，已经利用上述方法做出了漂亮的首页，但我还需要再添加一个网站引导页，该怎么办呢？ 对于别的常用网站程序，比如 dedecms 等，我们只要在程序根目录添加一个 index.html 引导页文件，并将优先级设置为高于 index.php 文件就可以了。但是这招对于WordPress无效。因为 WordPress 会一直调用网站根目录下优先权最高的文件，如果存在 index.html 且优先级高于 index.php ，会形成死循环，无法显示 WordPress 网站内容。 在这种情况下，我们有两种办法可以选择：第一，将WordPress网站整体转移到子目录下，然后在根目录添加 index.html 文件作为引导页；不过这会影响网站结构，并且不利于SEO，这里我们暂时不做介绍。第二，修改WordPress程序；这个办法稍微麻烦一些，并且要求你使用的服务器支持伪静态（mod_rewrite模块），分为以下四步： 1.在WordPress管理后台，找到【设置】-&gt;【固定链接（或者永久链接）】，修改默认的链接结构。这里只要确认不是默认链接结构就可以。 2. WordPress会自动在程序根目录下生成 .htaccess文件。如果你用的服务器不会自动生成 .htaccess 文件，你可以手动建立一个空白文本文件，命名为 .htaccess 。如果你用的主机空间根本不支持，那建议你更换一个更专业的WordPress主机。 需要注意的是，以上和以下的代码 # BEGIN WordPress &lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.php [L] &lt;/IfModule&gt; # END WordPress 中，请务必都使用小写字母，因为这些代码都是大小写敏感的，如果不一致会无法生效。在以上代码后面，手动添加以下三行代码，保证 index.html 文件的优先级高于 index.php 文件： &lt;IfModule dir_module&gt; DirectoryIndex index.html index.php &lt;/IfModule&gt; 3.在 WordPress 目录下，找到 wp-incudes/rewrite.php 文件，找到下面这一行： var $index = &#39;index.php&#39;; 将其修改为： var $index = &#39;home.php&#39;; 这一部，是将WordPress系统的首页改名为 home.php 。 4. 最后，将 WordPress 目录下首页的 index.php 文件复制一份，将名字修改为 home.php 。注意，这里是复制一份，不要直接修改文件名哦。 这样，问题就解决了。你可以创建自己的引导页，将其命名为 index.html ，然后引导页中指向网站的链接，指向 home.php 文件。引导页和WordPress都可以正常工作。WordPress内部链接不变，只是首页变成了 home.php 文件。 这个方案是其他WordPress网友研究出来的，我在这里和这里看到的。这个方案相对来说是比较简单的，因为不影响WordPress内部链接，又可以直接利用网上许多现成的引导页，很适合网友使用。不过遗憾的是，我测试的结果是，该方案仅适用于WordPress 3.5之前的版本。在WordPress 3.6之后，似乎失效了。 方法3：使用WordPress引导插件第2个办法虽好，但无法在新版本中继续使用，非常遗憾。继续使用旧版本的WordPress，可能会给你的网站带来安全威胁，这是我们我们无法接受的。 最后，我们求助于WordPress社区，这是WordPress之所以强大的力量源泉。许多狂热WordPress爱好者开发出了很多插件，来扩展WordPress的功能。在这里，我们找到了一个合适WordPress欢迎引导页面插件，WP Splash Page插件。此外还有一个界面类似，名字不同的插件叫做Preloading，可作为备用。 在WordPress的管理后台，下载WP Splash Page插件，安装并激活该插件后，我们可以在【设置】-&gt;【WP Splash Page】中设置一些相关选项： 这个插件中可以设置引导页的页面标题、标题、内容、继续访问按钮上的文字，以及使用的颜色，背景图片和北京色彩等。你还可以使用视频作为引导页内容，在这里可以设置视频的宽度和高度，以及是否自动播放等。 此外，这个插件还包括一些额外的选项，比如验证访问者的年龄（按照相关法律规定，某些内容需要18岁以上方可访问），比如需要访问者同意网站使用协议等。这些都可以进行设置。 WP Splash Page插件使用简单，方便，不需要任何编程基础，也不需要修改文字。稍微有点遗憾的是，默认模板和配色方案过于简陋。不过只要你花点心思，改变一下默认的配色方案，或者修改一下模板的CSS代码，就可以用他来作出一个更加漂亮的引导页面。 引导页面仅适用于某些特殊的场合，如果使用不当会给用户带来不太友好的访问体验，建议用户在使用的时候慎重对待。不过，如何给WordPress网站定做一个欢迎引导页面，是个非常有趣的话题。相信不少读者还有其他的奇思妙想，可以做的比我们更好。如果你有更好的做法或者建议，请别忘了留言给我们哦。]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress判断文章所属分类函数in_category，实现文章页自定义]]></title>
    <url>%2Fwordpress-in-category.html</url>
    <content type="text"><![CDATA[最近自己在修改一个采用Wordpress程序的博客的时候需要用到一个特殊的功能：我需要判断这篇文章是属于哪些分类，如果属于我设定的分类下的文章，则输出一个DIV内容。按道理说实现这个功能应该不算太难，因为印象中wordpress有相关的函数。简单查阅了一些资料后发现is_category和in_category这两个函数，最后是靠in_category函数实现的。具体方法也很简单： in_category(array( ’1′, ’2′, ’3′)) ) 这段函数的意思是识别分类目录ID为1、2、3这三个分类，可以利用这个功能实现特定分类使用自定义模板或内容等。 这其中还有个小插曲让我纠结了很久，那就是in_category和is_category的差别，它们的差别让我想实现的功能差点就黄掉了。这里贴出来做个记录： in_category：判断当前文章或指定文章是否属于某个指定类别，只有直属的类别，不包括直属类别的父辈类别；可以在循环内使用，也可以独立使用。 is_category：判断是否正在显示一个类别归档页面。 也就是说，如果你要在wordpress里面判断某个东西是否属于某分类，则用in_category，而如果是想判断某个分类的表现，那就要用is_category函数。]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress保护后台登录地址]]></title>
    <url>%2Fwordpress-wp-admin.html</url>
    <content type="text"><![CDATA[这几天被暴力破解搞的十分烦躁，不知道对方使用了什么黑科技，禁止ip仍然可以暴力登陆。 可是我又不想直接删登陆文件或者修改文件，记得以前记录过相关内容（WordPress 更改默认登录地址和修改Wordpress后台登陆地址,修改wp-login.php文件换掉登陆地址），最后选择了和第一种一样但是代码更短一点的一段代码（来自wp大学），简单改了下登陆地址。 // 保护后台登录 add_action('login_enqueue_scripts','login_protection'); function login_protection(){ if($_GET['abc'] != 'def')header('Location: http://im.acirno.com/'); } 使用的时候，可以把第四行中的 if($_GET[&#39;abc&#39;] != &#39;def&#39;) 中的abc和def修改成自定义的字符，然后后面的跳转网址修改成自己的网址。最后把这段代码添加到主题的 function.php 文件中。这样一来，如果你再直接访问 http://你的域名/wp-login.php 的话，浏览器会自动跳转到设置的地址上去。正确的访问后台的地址则变成了 http://你的域名/wp-login.php?abc=def 只有正确输入了两个参数，才能正确的进入后台入口，当然你也可以将这两个参数改成其他复杂的字符比如日文啊、中文啊之类的。 另外最好记录下正确的登陆地址。万一忘记了的话只能去主机后台，找到 function.php 文件查看了。]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress wp-cron.php造成服务器CPU超标解决办法]]></title>
    <url>%2Fwordpress-wp-cron-php-cpu.html</url>
    <content type="text"><![CDATA[只要禁用WP-Cron就行了，编辑wp-config.php，加入一下一行: define( 'DISABLE_WP_CRON' , true);]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress如何自动截取文章内容作为首页摘要]]></title>
    <url>%2Fwordpress-zidongzhaiyao.html</url>
    <content type="text"><![CDATA[本文主要讲解：如何自动截取文章内容文字来作为WordPress首页文章摘要，众所周知，WordPrss是带有摘要函数的，the_excerpt()，但我们之前却不常用到她，因为她不支持中文截取。现在好消息来了，她已经支持中文截断了。 手动添加摘要，在TinyMCE编辑器下有填写摘要的编辑框（默认下可能不显示，点击右上角显示选项即可），如何你的主题首页在使用the_excerpt()，在这里填写好摘要后，首页就会显示你填写的摘要。本文的重点是自动摘要，往下看。 mb_strimwidth()截取摘要在此之前，the_excerpt()不支持中文截断字数，我们只能通过函数mb_strimwidth()截断the_content()来完成。 文章标题字数截断 &lt;?php echo mb_strimwidth(get_the_title(), 0, 36,"..."); ?> 文章内容字数截断 将下列代码替换掉主页（index.PHP）归档页（archive.php）等等中的&lt;?php the_content(); ?&gt;即可。 &lt;?php echo mb_strimwidth(strip_tags(apply_filters('the_content', $post->post_content)), 0, 280,"...",'utf-8'); ?> 说明：截取文章中280字节作为摘要。 文章评论字数截断 &lt;?php echo mb_strimwidth(strip_tags($rc_comm->comment_content), 0, 36,"..."); ?> the_excerpt()自动截取摘要第一步：将下列代码替换掉主页（index.php）归档页（archive.php）等等中的&lt;?php the_content(); ?&gt;。 &lt;?php the_excerpt(); ?> 第二步：修改主题模板函数function.php添加相应的功能函数。如下. 复制下列代码将其粘贴到主题functions.php闭合中： //新摘要字数截断 function new_excerpt_length($length) { return 280; } add_filter('excerpt_length', 'new_excerpt_length'); function new_excerpt_more($more) { return '···'; } add_filter('excerpt_more', 'new_excerpt_more'); 说明：同样截取文章中280字节作为文章摘要。 补充：侧边栏标题字数限定下面是mb_strimwidth()限定标题字数的两个实例，不同函数方法不一样。 侧边栏随机文章标题字数限定 &lt;?php $random = get_posts('orderby=rand&amp;numberposts=10'); foreach($random as $post ) : ?> &lt;li>&lt;a href="&lt;?php the_permalink(); ?>">&lt;?php echo mb_strimwidth(strip_tags(apply_filters('the_title', $post -> post_title)), 0, 35, '...'); ?>&lt;/a>&lt;/li> &lt;?php endforeach; ?> 侧边栏最新评论标题字数限定 &lt;?php $comments = get_comments('number=10'); foreach($comments as $comment){echo ' &lt;li>&lt;em>'.get_comment_author().' - &lt;/em>&lt;a href="'.get_comment_link().'" rel="nofollow" title="'.get_comment_text().'">'.mb_strimwidth(get_comment_text(), 0, 28, '...').'&lt;/a>&lt;/li>';}?>]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress 添加面包屑导航]]></title>
    <url>%2Fwordpress-add-a-breadcrumb.html</url>
    <content type="text"><![CDATA[将下面的代码添加到主题的 functions.php： /** * WordPress 添加面包屑导航 */ function cmp_breadcrumbs() { $delimiter = '»'; // 分隔符 $before = '&lt;span class="current">'; // 在当前链接前插入 $after = '&lt;/span>'; // 在当前链接后插入 if ( !is_home() &amp;&amp; !is_front_page() || is_paged() ) { echo '&lt;div itemscope itemtype="http://schema.org/WebPage" id="crumbs">'.__( 'You are here:' , 'cmp' ); global $post; $homeLink = home_url(); echo ' &lt;a itemprop="breadcrumb" href="' . $homeLink . '">' . __( 'Home' , 'cmp' ) . '&lt;/a> ' . $delimiter . ' '; if ( is_category() ) { // 分类 存档 global $wp_query; $cat_obj = $wp_query->get_queried_object(); $thisCat = $cat_obj->term_id; $thisCat = get_category($thisCat); $parentCat = get_category($thisCat->parent); if ($thisCat->parent != 0){ $cat_code = get_category_parents($parentCat, TRUE, ' ' . $delimiter . ' '); echo $cat_code = str_replace ('&lt;a','&lt;a itemprop="breadcrumb"', $cat_code ); } echo $before . '' . single_cat_title('', false) . '' . $after; } elseif ( is_day() ) { // 天 存档 echo '&lt;a itemprop="breadcrumb" href="' . get_year_link(get_the_time('Y')) . '">' . get_the_time('Y') . '&lt;/a> ' . $delimiter . ' '; echo '&lt;a itemprop="breadcrumb" href="' . get_month_link(get_the_time('Y'),get_the_time('m')) . '">' . get_the_time('F') . '&lt;/a> ' . $delimiter . ' '; echo $before . get_the_time('d') . $after; } elseif ( is_month() ) { // 月 存档 echo '&lt;a itemprop="breadcrumb" href="' . get_year_link(get_the_time('Y')) . '">' . get_the_time('Y') . '&lt;/a> ' . $delimiter . ' '; echo $before . get_the_time('F') . $after; } elseif ( is_year() ) { // 年 存档 echo $before . get_the_time('Y') . $after; } elseif ( is_single() &amp;&amp; !is_attachment() ) { // 文章 if ( get_post_type() != 'post' ) { // 自定义文章类型 $post_type = get_post_type_object(get_post_type()); $slug = $post_type->rewrite; echo '&lt;a itemprop="breadcrumb" href="' . $homeLink . '/' . $slug['slug'] . '/">' . $post_type->labels->singular_name . '&lt;/a> ' . $delimiter . ' '; echo $before . get_the_title() . $after; } else { // 文章 post $cat = get_the_category(); $cat = $cat[0]; $cat_code = get_category_parents($cat, TRUE, ' ' . $delimiter . ' '); echo $cat_code = str_replace ('&lt;a','&lt;a itemprop="breadcrumb"', $cat_code ); echo $before . get_the_title() . $after; } } elseif ( !is_single() &amp;&amp; !is_page() &amp;&amp; get_post_type() != 'post' ) { $post_type = get_post_type_object(get_post_type()); echo $before . $post_type->labels->singular_name . $after; } elseif ( is_attachment() ) { // 附件 $parent = get_post($post->post_parent); $cat = get_the_category($parent->ID); $cat = $cat[0]; echo '&lt;a itemprop="breadcrumb" href="' . get_permalink($parent) . '">' . $parent->post_title . '&lt;/a> ' . $delimiter . ' '; echo $before . get_the_title() . $after; } elseif ( is_page() &amp;&amp; !$post->post_parent ) { // 页面 echo $before . get_the_title() . $after; } elseif ( is_page() &amp;&amp; $post->post_parent ) { // 父级页面 $parent_id = $post->post_parent; $breadcrumbs = array(); while ($parent_id) { $page = get_page($parent_id); $breadcrumbs[] = '&lt;a itemprop="breadcrumb" href="' . get_permalink($page->ID) . '">' . get_the_title($page->ID) . '&lt;/a>'; $parent_id = $page->post_parent; } $breadcrumbs = array_reverse($breadcrumbs); foreach ($breadcrumbs as $crumb) echo $crumb . ' ' . $delimiter . ' '; echo $before . get_the_title() . $after; } elseif ( is_search() ) { // 搜索结果 echo $before ; printf( __( 'Search Results for: %s', 'cmp' ), get_search_query() ); echo $after; } elseif ( is_tag() ) { //标签 存档 echo $before ; printf( __( 'Tag Archives: %s', 'cmp' ), single_tag_title( '', false ) ); echo $after; } elseif ( is_author() ) { // 作者存档 global $author; $userdata = get_userdata($author); echo $before ; printf( __( 'Author Archives: %s', 'cmp' ), $userdata->display_name ); echo $after; } elseif ( is_404() ) { // 404 页面 echo $before; _e( 'Not Found', 'cmp' ); echo $after; } if ( get_query_var('paged') ) { // 分页 if ( is_category() || is_day() || is_month() || is_year() || is_search() || is_tag() || is_author() ) echo sprintf( __( '( Page %s )', 'cmp' ), get_query_var('paged') ); } echo '&lt;/div>'; } } 以上的代码功能已经十分完善了，带有 Html5微数据，包含本地化翻译（请将所有 ‘cmp’ 修改为你的主题专用的 textdomain，不明白的请阅读：让WordPress主题支持语言本地化） 在主题模板中使用以下代码调用： &lt;?php if(function_exists('cmp_breadcrumbs')) cmp_breadcrumbs();?> 至于 css美化什么的，自己折腾。 原文地址：https://www.wpdaxue.com/wordpress-add-a-breadcrumb.html]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Wordpress获取文章第一张图片为缩略图]]></title>
    <url>%2Fwordpress-easy-add-thumbnail.html</url>
    <content type="text"><![CDATA[将下面的代码添加到主题的 functions.php： /** *获取文章第一张图片为缩略图 */ if ( function_exists( 'add_theme_support' ) ) { add_theme_support( 'post-thumbnails' ); // 这应该是你的主题。但我们把这因为这样我们就可以在开关到支持他们的主题特色图片。 function easy_add_thumbnail($post) { $already_has_thumb = has_post_thumbnail(); $post_type = get_post_type( $post->ID ); $exclude_types = array(''); $exclude_types = apply_filters( 'eat_exclude_types', $exclude_types ); // 判断文章对应的图片附件是否存在 if ( $already_has_thumb ) { return; } // 判断是否已设置特色图片，若是不存在则获取第一张图片 if ( ! in_array( $post_type, $exclude_types ) ) { // 获取第一张图像 $attached_image = get_children( "order=ASC&amp;post_parent=$post->ID&amp;post_type=attachment&amp;post_mime_type=image&amp;numberposts=1" ); if ( $attached_image ) { $attachment_values = array_values( $attached_image ); // 添加附件ID add_post_meta( $post->ID, '_thumbnail_id', $attachment_values[0]->ID, true ); } } } // 设置功能图片后显示（旧文章） add_action('the_post', 'easy_add_thumbnail'); // 在发布时添加钩子设置缩略图 add_action('new_to_publish', 'easy_add_thumbnail'); add_action('draft_to_publish', 'easy_add_thumbnail'); add_action('pending_to_publish', 'easy_add_thumbnail'); add_action('future_to_publish', 'easy_add_thumbnail'); }]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>缩略图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx 不带www跳转www http跳转https]]></title>
    <url>%2Fwww-http-https.html</url>
    <content type="text"><![CDATA[server { listen 443 ssl http2; server_name www.windxx.com windxx.com; index index.php index.html index.htm default.php default.htm default.html; root /www/wwwroot/taotuba; #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则 #error_page 404/404.html; ssl_certificate /etc/letsencrypt/live/www.windxx.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/www.windxx.com/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; if ($host != 'www.windxx.com' ) { rewrite ^/(.*)$ https://www.windxx.com/$1 permanent; } if ($request_uri ~* "/?s=\[&amp;wp-admin") { return 403; } #SSL-END #ERROR-PAGE-START 错误页配置，可以注释、删除或修改 #error_page 404 /404.html; #error_page 502 /502.html; #ERROR-PAGE-END #PHP-INFO-START PHP引用配置，可以注释或修改 include enable-php-70.conf; #PHP-INFO-END #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效 include /www/server/panel/vhost/rewrite/www.windxx.com.conf; #REWRITE-END #禁止访问的文件或目录 location ~ ^/(\.user.ini|\.htaccess|\.git|\.project|LICENSE|README.md) { return 404; } location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ { expires 30d; access_log off; } location ~ .*\.(js|css)?$ { expires 12h; access_log off; } access_log /www/wwwlogs/www.windxx.com.log; } server { listen 80; server_name windxx.com www.windxx.com; if ($host != 'www.windxx.com' ) { rewrite ^/(.*)$ https://www.windxx.com/$1 permanent; } if ($host != 'windxx.com' ) { rewrite ^/(.*)$ https://www.windxx.com/$1 permanent; } }]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wordpress后台编辑网站地址http改成https后，后台进不去了？]]></title>
    <url>%2Fwordpress-http-https.html</url>
    <content type="text"><![CDATA[修改wp-config.php文件，加入 $_SERVER['HTTPS'] = 'on'; define('FORCE_SSL_LOGIN', true); define('FORCE_SSL_ADMIN', true);]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决MySQL数据库导入提示”utf8mb4_unicode_520_ci”错误]]></title>
    <url>%2Futf8mb4-unicode-520-ci.html</url>
    <content type="text"><![CDATA[直接尝试用mysql命令导入，然后提示”ERROR 1273 (HY000) at line 93: Unknown collation: ‘utf8mb4_unicode_520_ci’”错误。 重新将数据库备份一份，再导入还是出现这样的问题。这应该是数据库兼容问题导致的， 原来服务器的MYSQL版本是5.6，现在这台服务器的版本是5.5，应该是兼容问题，直接用编辑器打开SQL数据库文件，需要替换编码。 这次遇到的是utf8mb4_unicode_520_ci提示错误问题，这里我们用这个方法解决。 解决方法： 将数据库中的所有 utf8mb4_unicode_520_ci 字符全部替换成 utf8mb4_unicode_ci 然后再导入这样就没有错误。 PS：在替换之前，我们记得先备份一份，以免出错后还可以恢复。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取WordPress的文章总数评论总数及用户总数]]></title>
    <url>%2Fwordpress-php-daima.html</url>
    <content type="text"><![CDATA[WordPress博客信息统计有很多插件可以完成，但我们一般不需要那么强大的功能，一般我们只需要统计如：文章、反分类、评论的总数，更新时间、成立时间等信息，博客插件装多了影响速度，能不装插件就尽量不装插件，所以直接用PHP代码来吧。 日志总数： &lt;?php $count_posts = wp_count_posts(); echo $published_posts =$count_posts->publish;?>篇 草稿总数： &lt;?php $count_posts = wp_count_posts(); echo $draft_posts = $count_posts->draft; ?> 页面总数： &lt;?php $count_pages = wp_count_posts('page'); echo $page_posts = $count_pages->publish; ?> 用户总数： &lt;?php $users = $wpdb->get_var("SELECT COUNT(ID) FROM $wpdb->users"); echo $users; ?> 成立时间： &lt;?php echo floor((time()-strtotime("2009-8-23"))/86400); ?> //其中的年月日改成你自己的网站成立时间 分类总数： &lt;?php echo $count_categories = wp_count_terms('category'); ?>个 标签总数： &lt;?php echo $count_tags = wp_count_terms('post_tag'); ?>个 友情链接： &lt;?php $link = $wpdb->get_var("SELECT COUNT(*) FROM $wpdb->links WHERE link_visible = 'Y'"); echo $link; ?>个 网站运行： &lt;?php echo floor((time()-strtotime("2011-7-27"))/86400); ?>天 最后更新： &lt;?php $last = $wpdb->get_results("SELECT MAX(post_modified) AS MAX_m FROM $wpdb->posts WHERE (post_type = 'post' OR post_type = 'page') AND (post_status = 'publish' OR post_status = 'private')");$last = date('Y年n月j日', strtotime($last[0]->MAX_m));echo $last; ?>]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos 6.4 Python 2.6 升级到 2.7]]></title>
    <url>%2Fpythonshengji.html</url>
    <content type="text"><![CDATA[1.查看python的版本#python -V Python 2.6.6 2.下载Python-2.7.3#wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2 3.解压#tar -jxvf Python-2.7.3.tar.bz2 4.更改工作目录#cd Python-2.7.3 5.安装#./configure #make all #make install #make clean #make distclean 6.查看版本信息#/usr/local/bin/python2.7 -V 7.建立软连接，使系统默认的 python指向 python2.7#mv /usr/bin/python /usr/bin/python2.6.6 #ln -s /usr/local/bin/python2.7 /usr/bin/python 8.重新检验Python 版本#python -V 9.软连接解决系统 Python 软链接指向 Python2.7 版本后，因为yum是不兼容 Python 2.7的，所以yum不能正常工作，我们需要指定 yum 的Python版本 #vi /usr/bin/yum 将文件头部的 #!/usr/bin/python 改成 #!/usr/bin/python2.6.6]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决要执行请求的操作，WordPress需要访问您网页服务器的权限]]></title>
    <url>%2Fwordpressquanxian.html</url>
    <content type="text"><![CDATA[比如我们在VPS主机中创建WordPress站点的时候，会有需要在线安装主题、插件等，但是点击下载安装的时候会有”要执行请求的操作，WordPress需要访问您网页服务器的权限。 请输入您的FTP登录凭据以继续。 如果您忘记了您的登录凭据（如用户名、密码），请联系您的网站托管商。”错误提示。看来是我们的VPS给予站点的权限不够导致的。 第一、授权目录chown -R www-data /home/wwwroot/windxx.com/ chmod -R 775 /home/wwwroot/windxx.com/ chmod -R 777 /home/wwwroot/windxx.com/wp-content/ 把红色部分替换成自己站点的目录 第二、修改wp-config.php文件define("FS_METHOD", "direct"); define("FS_CHMOD_DIR", 0777); define("FS_CHMOD_FILE", 0777); 在wp-config.php文件最后添加上面三行。 这样，我们在到wordpress后台下载插件、主题安装都没有问题。]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决LNMP环境无法显示所有WordPress主题及无法编辑主题页面]]></title>
    <url>%2Flnmp-wordpress-themes.html</url>
    <content type="text"><![CDATA[之前用LNMP一键包的时候一直遇到这几个问题。 WordPress后台主题只能显示启用的这一个。 外观编辑无法使用。 页面里面的模板功能无法使用。 这样的问题，肯定不是当前站点环境权限问题，肯定是LNMP一键包环境中对于PHP权限的设置限制，我们需要修改系统程序文件。 解决方法： 第一、编辑/usr/local/php/etc/php.ini文件 第二、找到disable_functions这一行中，删除”scandir,”这一段脚本，然后保存这个文件退出 第三、运行 /etc/init.d/php-fpm restart 命令，重启PHP-FPM 这个时候，我们再刷新WORDPRESS网站后台主题列表页面，可以看到当前的所有主题都在，我们可以启用需要的主题，也可以任意的编辑当前启用主题的页面内容。]]></content>
      <categories>
        <category>WordPress</category>
      </categories>
  </entry>
</search>
